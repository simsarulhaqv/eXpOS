alias currentPID S0;
alias currentPCB S1;
alias physicalSP S2;
alias newPCB S3;
alias newphysicalSP S4;
alias newPID S5;
alias counter S6;

// find the current pid and pcb
currentPID=(PTBR-1024)/8;
currentPCB=READY_LIST+32*currentPID;

// save the context of the current process
[currentPCB+1]=1;
[currentPCB+2]=BP;
[currentPCB+3]=SP-1;
// SP -1 because when an interrupt occurs, IP value is stored on the top of the stack. hence the SP value will be SP-1

physicalSP=([PTBR+2*(SP/512)]*512)+(SP%512);

[currentPCB+4] = [physicalSP];
[currentPCB+5]=PTBR;
[currentPCB+6]=PTLR;
[currentPCB+7]=R0;
[currentPCB+8]=R1;
[currentPCB+9]=R2;
[currentPCB+10]=R3;
[currentPCB+11]=R4;
[currentPCB+12]=R5;
[currentPCB+13]=R6;
[currentPCB+14]=R7;



newPID = (currentPID+1)%32;
newPCB = READY_LIST+32*newPID;
counter = 0;
while( [newPCB + 1] != 1 && counter < 32) do
	newPID = (newPID+1)%32;
	newPCB = READY_LIST+32*newPID;
	counter = counter + 1;
endwhile;


BP = [newPCB + 2];
SP = [newPCB + 3];

PTBR=[newPCB+5];
PTLR=[newPCB+6];
R0=[newPCB+7];
R1=[newPCB+8];
R2=[newPCB+9];
R3=[newPCB+10];
R4=[newPCB+11];
R5=[newPCB+12];
R6=[newPCB+13];
R7=[newPCB+14];

SP = SP + 1;
newphysicalSP = ([PTBR + 2* (SP/512)]*512) + (SP%512);
[newphysicalSP] = [newPCB + 4];

[newPCB + 1] = 2;

ireturn;

