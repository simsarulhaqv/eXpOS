alias physicalSP S0;
physicalSP = ([PTBR + 2*(SP/512)]*512 + (SP)%512);

alias  sysCallNo S1;
sysCallNo = [physicalSP-1];


//open File
if(sysCallNo == 2) then
	//Argument stored in Stack SP-2 onwards	
	alias fileName S2;
	S2 = [physicalSP-3];
	S3 = 0;
	
	//get FAT index of the file to be open
	while([FAT + 8*S3]!=fileName && S3<64) do
		S3=S3+1;
	endwhile;
	
	//if file not found in fat table return -1
	if(S3>=64) then
		print "File Not In Fat";
		[physicalSP-2]=-1;
		ireturn;
	endif;
		
	//check in system wide file table if the file is already open
	//store the index in S4

	S4 = 0;
	while([FILE_TABLE + S4*2]!=S3 && S4<64) do
		S4=S4+1;
	endwhile;
	
	//if the file is not open then store index of free entry in system wide open table in S4

	if(S4>=64) then
		S4 = 0;
		while([FILE_TABLE + S4*2]!=-1 && S4<64) do
			S4=S4+1;
		endwhile;
		if(S4>64) then
			print "No space in system wide open file table";
			[physicalSP-2]=-1;
			ireturn;
		endif;
	endif;
	
	//print S4;
	//print "S4";

	//Store the PCB value of the current process in S5
	alias PCB S5;
	PCB = READY_LIST + ((PTBR-1024)/8)*32; //32*pid + READY)LIST 
	

	//in the pcb check if a per process table entry is free
	S6 = 15;
	while([PCB + S6]!=-1 && S6<=30) do
		S6=S6+2;
	endwhile;

	if(S6>30) then
		print "File open limit for process exceeded";
		[physicalSP-2]=-1;
		ireturn;
	endif;

	//S6 has the index to free entry
	[PCB + S6] = S4;
	[PCB + S6] = 0;

	//update the system file open table
	//store the fat index and increment file open count
	[FILE_TABLE + S4*2]=S3;
	[FILE_TABLE + S4*2+1]=[FILE_TABLE + S4*2+1]+1;

	[physicalSP-2]=(S6-15)/2;
	ireturn;
endif;

if(sysCallNo == 3) then
	alias fd S2;	
	fd = [physicalSP -3];
	if(fd>=8 || fd<0) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	alias PCB S3;
	PCB = READY_LIST + ((PTBR-1024)/8)*32; //32*pid + READY)LIST 
	
	
	alias fat S4;
	//fat index in Per Process open file table
	fat = [PCB + 15 + fd*2];

	//If fat index in Per Process open file table is -1 return
	if (fat==-1) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	
	//Decrement the file open count in system wide open file table	
	[FILE_TABLE + fat*2 + 1] = [FILE_TABLE + fat*2 + 1] -1;

	//if file count is 0, invaliditate the entry
	
	if([FILE_TABLE + fat*2 + 1]==0) then
		[FILE_TABLE + fat*2]=-1;
	endif;

	//invaliditate entry in per process file table

	[PCB + 15 + fd*2] = -1;
	[PCB + 16 + fd*2] = 0;
	
	[physicalSP -2] =0;
	ireturn;
endif;
