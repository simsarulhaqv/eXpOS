alias Cause S0;
alias BadVAddr S1;
alias IPAddress S2;

alias counter S3;
alias freePageIndex S4;
alias PTBRCounter S5;
alias VPagenum S9;
alias TRUE S11;
TRUE = 1;	

Cause = EFR % 10;		// Gets value of cause field (size 1 char)
BadVAddr = (EFR / 10) % 100;    // Gets value of BadVAddr 
IPAddress = (EFR / 1000);		//Gets value of IP at the point
VPagenum = [PTBR + BadVAddr * 2];

alias physicalSP S10;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);


if (Cause != 0) then
	// do the same things you would do for exit??
	SP = SP + 1;
	[physicalSP] = 10;
	inline "JMP 11776";
endif;

if (VPagenum == -1) then
	// invalid page
	SP = SP + 1;
	[physicalSP] = 10;
	inline "JMP 11776";
endif;

// try to find a free page

counter = 25;
while (counter < 64) do
	if ([MEM_LIST + counter] == 0) then
		freePageIndex = counter;
		[MEM_LIST + counter] = 1;
		break;
	endif;
	counter = counter + 1;
endwhile;

if (counter == 64) then
	
	// no memory entry free
	// so swap one into disk and proceed
	// need to select a victim page 
	// WARNING: REUSING COUNTER
	
	alias startPTEntry S6;
	alias PTEntryCounter S7;
	alias swapPageIndex S8;
	
	// find the entry that lead to the exception
	startPTEntry = PTBR - 1024 + BadVAddr * 2;
	
	while (TRUE == 1) do
		
		// keep doing until a victim page is selected
		
		// we have to start from the entry that caused the page fault
		
		PTEntryCounter = (startPTEntry + 2) % 256;
		
		while (PTEntryCounter != startPTEntry) do
			
			// check if page is being used for stack
			if (PTEntryCounter % 8 == 6) then
				PTEntryCounter = (PTEntryCounter + 2) % 256;
				continue;
			endif;
			
			// PTEntryCounter now points to the page number entry
			
			if ([PAGE_TABLE + PTEntryCounter + 1] == "01") then
				
				// we have a potential victim page
				// check if the memory page is shared or not
				
				if ([MEM_LIST + [PAGE_TABLE + PTEntryCounter]] > 1) then
					// page is shared						// update and continue
					PTEntryCounter = PTEntryCounter + 2;
					continue;
				endif;
				
				// we have an actual victim page
				
				// scan the memory copy of the disk free list for a free block
				// in the swap area
				
				swapPageIndex = 448;
				while (swapPageIndex < 512) do
					if ([DISK_LIST + swapPageIndex] == 0) then
						store([PAGE_TABLE + PTEntryCounter], swapPageIndex);
						// mark swap disk block as used
						[DISK_LIST + swapPageIndex] = 1;
						// store the index of the obtained page 
						freePageIndex = [PAGE_TABLE + PTEntryCounter];
						// mark PTBR entry to point to swap block
						[PAGE_TABLE + PTEntryCounter] = swapPageIndex;
						// set auxiliary information of page as invalid
						[PAGE_TABLE + PTEntryCounter + 1] = "00";
						break;						
					endif;
					swapPageIndex = swapPageIndex + 1;
				endwhile;
					
				if (swapPageIndex == 512) then
					// no place to swap the page to
					// make the process exit
					SP = SP + 1;
					[physicalSP] = 10;
					inline "JMP 11776";
				endif;
				
				if (swapPageIndex != 512) then
					// we have a valid page index stored in freePageIndex
					// break out
					break;
				endif;					
					
			endif;
			
			if ([PAGE_TABLE + PTEntryCounter + 1] == "11") then
				
				// change auxiliary information
				// i.e. give second chance
				
				[PAGE_TABLE + PTEntryCounter + 1] = "01";
				
			endif;
			
			PTEntryCounter = (PTEntryCounter + 2) % 256;		
			
		endwhile;
		
		if (PTEntryCounter != startPTEntry) then
			// we have a valid page index stored in freePageIndex
			// so we can stop executing the loop
			break;
		endif;
		
	endwhile;
	
endif;

// come hail or sun, we have a memory location stored in freePageIndex

// check if the physical page number is a disk or swap block number

if (VPagenum > 20 && VPagenum < 448) then
	// disk block number
	// just load the code onto memory
	load(freePageIndex, VPagenum);
endif;

if (VPagenum > 447) then
	// swap block number
	// load and update entry in disk free list
	load (freePageIndex, VPagenum);
	[DISK_LIST + VPagenum] = [DISK_LIST + VPagenum] - 1;
endif;

// set proper physical page number in PTBR of current process
[PTBR + BadVAddr * 2] = freePageIndex;
[PTBR + BadVAddr * 2 + 1] = "11";

// increment SP by 1 and store IP value 
SP = SP + 1;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[physicalSP] = IPAddress;
ireturn;
